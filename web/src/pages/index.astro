---
import Layout from '../layouts/Layout.astro';
import theme from '../../../src/theme.js'
import CopyIcon from '../components/icons/copyIcon.astro'
import pkg from '../../../package.json'
import { Code } from 'astro:components'

const { animation, animationDuration, animationSteps, animationDelay } = theme
const { version } = pkg
---

<Layout title="Welcome to Astro.">
	<wc-toast></wc-toast>
	<main class="px-3 pb-10">
		<header class="max-w-4xl mx-auto flex items-center justify-center flex-col">
			<h1 class="font-semibold text-4xl pt-10 pb-5">Tailwind CSS Animations</h1>
			<h2 class="font-medium opacity-80">Plugin for Tailwind CSS <code> Version {version}</code></h2>
			<div id="command-install"class="lg:max-w-sm w-full mt-10 mb-5 py-3 px-4 text-sm border-[1px] rounded-[4px] cursor-pointer">
				<code class="flex items-center gap-4">npm i @jose-sissa-3s/tailwind-animations <CopyIcon styles="inline-block" /></code>
			</div>
			<div class='lg:max-w-sm flex w-full max-w-md mb-5 items-center gap-x-2 rounded-xl bg-[#0d1117] py-3 pl-4 pr-4 text-center text-white backdrop-blur'>
				<pre
					class='flex text-left text-xs'>
					<Code wrap={true} theme="github-dark-default" lang="js" code={`import animations from '@midudev/tailwind-animations'

export default {
	// ...rest of the options
	plugins: [animations],
}`} />
				</pre>
			</div>
			<section class='mb-6 flex flex-col items-center'>
				<p class='text-xl font-medium mb-2'>Animate all</p>
				<label class='relative inline-flex cursor-pointer items-center'>
					<input type='checkbox' value='' class='peer sr-only' id='animate' />
					<div class="rtl:peer-checked:after:-translate-x- peer h-8 w-16 rounded-full bg-gray-200 after:absolute after:start-[2px] after:top-[2px] after:h-7 after:w-7 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all after:content-[''] peer-checked:bg-zinc-600 peer-checked:after:translate-x-[31px] peer-checked:after:border-white peer-focus:outline-none dark:bg-zinc-300">
					</div>					
				</label>
			</section>
			<section class='mb-6 grid grid-flow-col gap-6 columns-4 items-center justify-center'>
				<label for="duration" class="block mb-2 text-sm font-medium text-white">
				  Duration
				  <select name="duration" id="duration" class="mt-2 min-w-24 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400">
					{Object.entries(animationDuration).map(([key, value])=> {
					  return (<option class="bg-black" value={value}>{key}</option>)
					})}
				  </select>
				</label>
				<label for="delay" class="block mb-2 text-sm font-medium text-white">
				  Delay
				  <select name="delay" id="delay" class="mt-2 min-w-24 border border-gray-300 text-gray-900 text-sm rounded-lg  block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400">
					{Object.entries(animationDelay).map(([key, value])=> {
					  return (<option class="bg-black" value={value}>{key}</option>)
					})}
				  </select>
				</label>
				<label for="steps" class="block mb-2 text-sm font-medium text-white">
				  Steps
				  <select name="steps" id="steps" class="mt-2 min-w-24 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400">
					{Object.entries(animationSteps).map(([key, value])=> {
					  return (<option class="bg-black" value={value}>{key}</option>)
					})}
				  </select>
				</label>
			  </section>
		</header>

		<section class="max-w-sm
				lg:max-w-4xl mx-auto grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
			{
				Object.keys(animation).map(animationKey => {
					return (
						<article class="relative col-span-1 border rounded border-gray-200 hover:border-gray-400 hover:shadow transition cursor-pointer" data-class={animationKey}>
							<CopyIcon styles="absolute top-2 right-2" />
							<div class="w-full h-full py-6 flex gap-4 items-center justify-center flex-col">
								<span class="w-16 h-16 bg-gray-200 rounded-md flex items-center justify-center">
								</span>
								<h3 class="font-semibold text-sm opacity-80">{animationKey}</h3>
							</div>
						</article>
					)
				})
			}
		</section>
	</main>
</Layout>

<script>
	import { toast } from 'wc-toast'

	const articles = document.querySelectorAll('article')
	const commandInstall = document.getElementById('command-install')
	const animateAll = document.getElementById('animate')
	const duration: HTMLSelectElement = document.querySelector('#duration')
	const steps: HTMLSelectElement = document.querySelector('#steps')
	const delay: HTMLSelectElement = document.querySelector('#delay')

	articles.forEach((article) => {
		const animationKey = article.getAttribute('data-class')
		const animationClass = `animate-${animationKey}`
		const box = article.querySelector('span')

		article.addEventListener('mouseenter', () => {
			box.classList.add(animationClass)
		})
		article.addEventListener('mouseleave', () => {
			box.classList.remove(animationClass)
		})
		
		article.addEventListener('click', () => {
			const animationValue = `animate-${article.getAttribute('data-class')}`
			navigator.clipboard.writeText(animationValue)

			toast("Copied to clipboard!", 
			{
				theme: {
					type: "dark",
				},
				icon: {
					type: 'success'
				}
			})
		})

		animateAll.addEventListener('change', () => {
			if (animateAll.checked) {
				box.classList.add(animationClass)
				box.style.animationIterationCount = 'infinite'
			} else {
				box.classList.remove(animationClass)
				box.style.animationIterationCount = 'unset'
			}
		})
	})

	duration.addEventListener("change", (event) => {
		const target = event.target as HTMLSelectElement;
		articles.forEach(($article) => {
		const $box = $article.querySelector('span')
		if ($box == null) return
		$box.style.animationDuration = target.value
		})
	});

	steps.addEventListener("change", (event) => {
		const target = event.target as HTMLSelectElement;
		articles.forEach(($article) => {
		const $box = $article.querySelector('span')
		if ($box == null) return
		$box.style.animationTimingFunction = `steps(${target.value})`
		})
	});

	delay.addEventListener("change", (event) => {
		const target = event.target as HTMLSelectElement;
		articles.forEach(($article) => {
		const $box = $article.querySelector('span')
		if ($box == null) return
		$box.style.animationDelay = target.value
		})
	});

	commandInstall.addEventListener('click', () => {
		navigator.clipboard.writeText('npm i @jose-sissa-3s/tailwind-animations')
		toast("Copied to clipboard!", 
			{
				theme: {
					type: "dark",
				},
				icon: {
					type: 'success'
				}
			}
		)
	})
</script>
